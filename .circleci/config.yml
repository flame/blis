version: 2.1

branches:
  only:
    - master
    - dev
    - amd
    - circleci

linux: # Docker using the Base Convenience Image
  docker:
    - image: 'cimg/base:2024.10'
macos: # macos executor running Xcode
  macos:
    xcode: 14.2.0

workflows:
  build:
    jobs:
      # full testsuite (all tests + mixed datatype (gemm_nn only) + salt + SDE + OOT)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'gcc'
            OOT: 1
            TEST: 'ALL'
            SDE: 1
            THR: 'none'
            CONF: 'x86_64'
            PACKAGES: ''
      # openmp build
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'openmp'
            CONF: 'auto'
            PACKAGES: ''
      # pthreads build
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'pthreads'
            CONF: 'auto'
            PACKAGES: ''
      # clang build
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'clang'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'auto'
            PACKAGES: ''
      # macOS with system compiler (clang)
      - build:
          parameters:
            os: 'macos'
          environment:
            CC: 'clang'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'auto'
            PACKAGES: ''
      # cortexa15 build and fast testsuite (qemu)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'arm-linux-gnueabihf-gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'cortexa15'
            PACKAGES: 'gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-system-arm qemu-user'
            TESTSUITE_WRAPPER: 'qemu-arm -cpu cortex-a15 -L /usr/arm-linux-gnueabihf/'
      # cortexa57 build and fast testsuite (qemu)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'aarch64-linux-gnu-gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'cortexa57'
            PACKAGES: 'gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user'
            TESTSUITE_WRAPPER: 'qemu-aarch64 -L /usr/aarch64-linux-gnu/'
      # Apple M1 (firestorm) build and fast testsuite (qemu)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'aarch64-linux-gnu-gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'firestorm'
            PACKAGES: 'gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user'
            TESTSUITE_WRAPPER: 'qemu-aarch64 -L /usr/aarch64-linux-gnu/'
      # armsve build and fast testsuite (qemu)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'aarch64-linux-gnu-gcc-10'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'firestorm'
            PACKAGES: 'gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user'
            TESTSUITE_WRAPPER: 'qemu-aarch64 -cpu max,sve=true,sve512=true -L /usr/aarch64-linux-gnu/'
      # arm64 build and fast testsuite (qemu)
      # NOTE: This entry omits the -cpu flag so that while both NEON and SVE kernels
      # are compiled, only NEON kernels will be tested. (h/t to RuQing Xu)
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'aarch64-linux-gnu-gcc-10'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'arm64'
            PACKAGES: 'gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user'
            TESTSUITE_WRAPPER: 'qemu-aarch64 -L /usr/aarch64-linux-gnu/'
      # The RISC-V targets require the qemu version available in jammy or newer.
      # When CI is upgraded, the packages should be activated and do_script.sh
      # cleaned up.
      # PACKAGES="qemu-user qemu-user-binfmt"
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'riscv64-unknown-linux-gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'rv64iv'
            BLD: '--disable-shared'
            LDFLAGS: '-static'
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'riscv32-unknown-linux-gcc'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'rv32iv'
            BLD: '--disable-shared'
            LDFLAGS: '-static'
      - build:
          parameters:
            os: 'linux'
          environment:
            CC: 'clang'
            OOT: 0
            TEST: 'FAST'
            SDE: 0
            THR: 'none'
            CONF: 'sifive_x280'
            BLD: '--disable-shared'
            LDFLAGS: '-static'

jobs:
  build:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - checkout
      - run:
          name: Installing Dependencies
          command: 'sudo apt-get update && sudo apt-get install -y clang make python3 $PACKAGES'
      - run:
          name: Configuring
          command: |
            export DIST_PATH=.
            pwd
            if [ $OOT -eq 1 ]; then export DIST_PATH=`pwd`; mkdir ../oot; cd ../oot; chmod -R a-w $DIST_PATH; fi
            pwd
            if [ "$CONF" = "rv64iv" ]; then
              $DIST_PATH/travis/do_riscv.sh "$CONF";
              export CC=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-gcc;
              export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-g++;
              export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=128 -B 0x100000";
            fi
            if [ "$CONF" = "rv32iv" ]; then
              $DIST_PATH/travis/do_riscv.sh "$CONF";
              export CC=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-gcc;
              export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-g++;
              export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv32 -cpu rv32,vext_spec=v1.0,v=true,vlen=128 -B 0x100000";
            fi
            if [ "$CONF" = "sifive_x280" ]; then
              $DIST_PATH/travis/do_riscv.sh "$CONF";
              export CC=$DIST_PATH/../toolchain/riscv/bin/clang;
              export CXX=$DIST_PATH/../toolchain/riscv/bin/clang++;
              export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=512 -B 0x100000";
            fi
            $DIST_PATH/configure -p `pwd`/../install -t $THR $BLD CC=$CC $CONF
            pwd
            ls -l
            $CC --version
            $CC -v
      - run:
          name: Building
          command: |
            make -j2
            make install
      - run:
          name: Testing
          command: |
            if [ "$BLD" = "" ]; then $DIST_PATH/travis/cxx/cxx-test.sh $DIST_PATH $(ls -1 include); fi
            # Qemu SVE is failing sgemmt in some cases. Skip as this issue is not observed
            # on real chip (A64fx).
            if [ "$CONF" = "armsve" ]; then sed -i 's/.*\<gemmt\>.*/0/' $DIST_PATH/testsuite/input.operations.fast; fi
            if [ "$TEST" != "0" ]; then travis_wait 30 $DIST_PATH/travis/do_testsuite.sh; fi
            if [ "$SDE" = "1" ]; then travis_wait 30 $DIST_PATH/travis/do_sde.sh; fi
