language: c
sudo: required
dist: focal
branches:
  only:
  - master
  - dev
  - amd
matrix:
  include:
  # full testsuite (all tests + mixed datatype (gemm_nn only) + salt + SDE + OOT)
  - os: linux
    compiler: gcc
    env: OOT=1 TEST=ALL SDE=1 THR="none" CONF="x86_64" \
      PACKAGES="gcc-9 binutils"
  # openmp build
  - os: linux
    compiler: gcc
    env: OOT=0 TEST=FAST SDE=0 THR="openmp" CONF="auto" \
      PACKAGES="gcc-9 binutils"
  # pthreads build
  - os: linux
    compiler: gcc
    env: OOT=0 TEST=FAST SDE=0 THR="pthreads" CONF="auto" \
      PACKAGES="gcc-9 binutils"
  # clang build
  - os: linux
    compiler: clang
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="auto"
      # There seems to be some difficulty installing two Clang toolchains of
      # different versions.
      # Use the TravisCI default.
      # PACKAGES="clang-8 binutils"
  # macOS with system compiler (clang)
  - os: osx
    compiler: clang
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="auto"
  # cortexa15 build and fast testsuite (qemu)
  - os: linux
    compiler: arm-linux-gnueabihf-gcc
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="cortexa15" \
      CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ \
      PACKAGES="gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-system-arm qemu-user" \
      TESTSUITE_WRAPPER="qemu-arm -cpu cortex-a15 -L /usr/arm-linux-gnueabihf/"
  # cortexa57 build and fast testsuite (qemu)
  - os: linux
    compiler: aarch64-linux-gnu-gcc
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="cortexa57" \
      CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
      PACKAGES="gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user" \
      TESTSUITE_WRAPPER="qemu-aarch64 -L /usr/aarch64-linux-gnu/"
  # Apple M1 (firestorm) build and fast testsuite (qemu)
  - os: linux
    compiler: aarch64-linux-gnu-gcc
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="firestorm" \
      CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \
      PACKAGES="gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user" \
      TESTSUITE_WRAPPER="qemu-aarch64 -L /usr/aarch64-linux-gnu/"
  # armsve build and fast testsuite (qemu)
  - os: linux
    compiler: aarch64-linux-gnu-gcc-10
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="armsve" \
      CC=aarch64-linux-gnu-gcc-10 CXX=aarch64-linux-gnu-g++-10 \
      PACKAGES="gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user" \
      TESTSUITE_WRAPPER="qemu-aarch64 -cpu max,sve=true,sve512=true -L /usr/aarch64-linux-gnu/"
  # arm64 build and fast testsuite (qemu)
  # NOTE: This entry omits the -cpu flag so that while both NEON and SVE kernels
  # are compiled, only NEON kernels will be tested. (h/t to RuQing Xu)
  - os: linux
    compiler: aarch64-linux-gnu-gcc-10
    env: OOT=0 TEST=FAST SDE=0 THR="none" CONF="arm64" \
      CC=aarch64-linux-gnu-gcc-10 CXX=aarch64-linux-gnu-g++-10 \
      PACKAGES="gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user" \
      TESTSUITE_WRAPPER="qemu-aarch64 -L /usr/aarch64-linux-gnu/"
  # The RISC-V targets require the qemu version available in jammy or newer.
  # When CI is upgraded, the packages should be activated and do_script.sh
  # cleaned up.
  # PACKAGES="qemu-user qemu-user-binfmt"
  - os: linux
    compiler: riscv64-unknown-linux-gcc
    env: OOT=0 TEST=FAST SDE=0 THR="none" BLD="--disable-shared" CONF="rv64iv" \
      CC=riscv64-unknown-linux-gnu-gcc \
      LDFLAGS=-static
  - os: linux
    compiler: riscv32-unknown-linux-gcc
    env: OOT=0 TEST=FAST SDE=0 THR="none" BLD="--disable-shared" CONF="rv32iv" \
      CC=riscv32-unknown-linux-gnu-gcc \
      LDFLAGS=-static
  - os: linux
    compiler: clang
    env: OOT=0 TEST=FAST SDE=0 THR="none" BLD="--disable-shared" CONF="sifive_x280" \
      CC=clang \
      LDFLAGS=-static
install:
- if [ "$CC" = "gcc"  ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CC="gcc-9"; fi
- if [ -n "$PACKAGES" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y $PACKAGES; fi
script:
- export DIST_PATH=.
- pwd
- if [ $OOT -eq 1 ]; then export DIST_PATH=`pwd`; mkdir ../oot; cd ../oot; chmod -R a-w $DIST_PATH; fi
- pwd
- if [ "$CONF" = "rv64iv" ]; then
    $DIST_PATH/travis/do_riscv.sh "$CONF";
    export CC=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-gcc;
    export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-g++;
    export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=128 -B 0x100000";
  fi
- if [ "$CONF" = "rv32iv" ]; then
    $DIST_PATH/travis/do_riscv.sh "$CONF";
    export CC=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-gcc;
    export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-g++;
    export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv32 -cpu rv32,vext_spec=v1.0,v=true,vlen=128 -B 0x100000";
  fi
- if [ "$CONF" = "sifive_x280" ]; then
    $DIST_PATH/travis/do_riscv.sh "$CONF";
    export CC=$DIST_PATH/../toolchain/riscv/bin/clang;
    export CXX=$DIST_PATH/../toolchain/riscv/bin/clang++;
    export TESTSUITE_WRAPPER="$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=512 -B 0x100000";
  fi
- $DIST_PATH/configure -p `pwd`/../install -t $THR $BLD CC=$CC $CONF
- pwd
- ls -l
- $CC --version
- $CC -v
- make -j 2
- make install
- if [ "$BLD" = "" ]; then $DIST_PATH/travis/cxx/cxx-test.sh $DIST_PATH $(ls -1 include); fi
# Qemu SVE is failing sgemmt in some cases. Skip as this issue is not observed
# on real chip (A64fx).
- if [ "$CONF" = "armsve" ]; then sed -i 's/.*\<gemmt\>.*/0/' $DIST_PATH/testsuite/input.operations.fast; fi
- if [ "$TEST" != "0" ]; then travis_wait 30 $DIST_PATH/travis/do_testsuite.sh; fi
- if [ "$SDE" = "1" ]; then travis_wait 30 $DIST_PATH/travis/do_sde.sh; fi
